// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is an RESTful application service for the EdgeX Foundry IoT-Gateway",
    "title": "iot-gateway",
    "version": "0.0.2"
  },
  "host": "0.0.0.0:8080",
  "basePath": "/api",
  "paths": {
    "/v1/admin/policies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find all policies",
        "parameters": [
          {
            "$ref": "#/parameters/Limit"
          },
          {
            "$ref": "#/parameters/Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Policy"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a new policy",
        "parameters": [
          {
            "$ref": "#/parameters/PolicyBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Policy"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "summary": "Deletes the policy",
        "parameters": [
          {
            "$ref": "#/parameters/PolicyBody"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Deleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/admin/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find all roles",
        "parameters": [
          {
            "$ref": "#/parameters/Limit"
          },
          {
            "$ref": "#/parameters/Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a new role",
        "parameters": [
          {
            "$ref": "#/parameters/RoleBody"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/admin/roles/{role}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "summary": "Deletes the role",
        "parameters": [
          {
            "$ref": "#/parameters/RolePath"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Deleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/admin/roles/{role}/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Finds all Users associated with the role",
        "parameters": [
          {
            "$ref": "#/parameters/Limit"
          },
          {
            "$ref": "#/parameters/Offset"
          },
          {
            "$ref": "#/parameters/RolePath"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/admin/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find all Users",
        "parameters": [
          {
            "$ref": "#/parameters/Limit"
          },
          {
            "$ref": "#/parameters/Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a new user",
        "parameters": [
          {
            "description": "User to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/admin/users/{user}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find user by name",
        "parameters": [
          {
            "$ref": "#/parameters/UserPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "delete": {
        "summary": "Deletes the user",
        "parameters": [
          {
            "$ref": "#/parameters/UserPath"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Deleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "summary": "Updates the user",
        "parameters": [
          {
            "$ref": "#/parameters/UserPath"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Updated"
          },
          "400": {
            "$ref": "#/responses/UpdateFailed"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/devices": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find all devices",
        "parameters": [
          {
            "$ref": "#/parameters/Limit"
          },
          {
            "$ref": "#/parameters/Offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Device"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/devices/{device}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find device by name",
        "parameters": [
          {
            "$ref": "#/parameters/DevicePath"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/devices/{device}/commands/{command}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Issue the GET command referenced by the command name to the device/sensor.",
        "parameters": [
          {
            "$ref": "#/parameters/DevicePath"
          },
          {
            "$ref": "#/parameters/CommandPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CommandResponse"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue the PUT command referenced by the command name to the device/sensor.",
        "parameters": [
          {
            "$ref": "#/parameters/DevicePath"
          },
          {
            "$ref": "#/parameters/CommandPath"
          },
          {
            "$ref": "#/parameters/CommandBody"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CommandResponse"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/devices/{device}/profile": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get deviceprofile of device",
        "parameters": [
          {
            "$ref": "#/parameters/DevicePath"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/DeviceProfile"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/devices/{device}/resources/{resource}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get the last resource reading from the device",
        "parameters": [
          {
            "$ref": "#/parameters/DevicePath"
          },
          {
            "$ref": "#/parameters/ResourcePath"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Reading"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/devices/{device}/valuedescriptors": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get all valuedescriptors",
        "parameters": [
          {
            "$ref": "#/parameters/DevicePath"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueDescriptor"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    },
    "/v1/ping": {
      "get": {
        "security": [],
        "description": "Test service providing an indication that the service is available.",
        "produces": [
          "text/plain"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Return value of \"pong\"",
            "schema": {
              "type": "string",
              "example": "pong"
            }
          },
          "503": {
            "$ref": "#/responses/InternalError"
          }
        }
      }
    }
  },
  "definitions": {
    "Command": {
      "description": "command of a device/sensor",
      "type": "object",
      "title": "command",
      "properties": {
        "get": {
          "type": "object",
          "title": "get",
          "properties": {
            "responses": {
              "type": "array",
              "title": "responses",
              "items": {
                "$ref": "#/definitions/CommandGetResponse"
              },
              "x-omitempty": true,
              "x-order": 0
            }
          },
          "x-order": 1
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "put": {
          "description": "availabill put command",
          "type": "object",
          "title": "put",
          "properties": {
            "parameterNames": {
              "type": "array",
              "title": "parameterNames",
              "items": {
                "type": "string"
              },
              "x-omitempty": true,
              "x-order": 0
            },
            "responses": {
              "type": "array",
              "title": "responses",
              "items": {
                "$ref": "#/definitions/CommandPutResponse"
              },
              "x-omitempty": true,
              "x-order": 1
            }
          },
          "x-order": 2
        }
      }
    },
    "CommandGetResponse": {
      "type": "object",
      "title": "commandgetresponse",
      "properties": {
        "code": {
          "type": "string",
          "title": "code",
          "x-order": 0
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 1
        },
        "expectedValues": {
          "type": "array",
          "title": "expectedValues",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "x-order": 2
        }
      }
    },
    "CommandPayload": {
      "description": "key/value properties for the command",
      "type": "object",
      "title": "commandPayload",
      "additionalProperties": {
        "type": "object"
      }
    },
    "CommandPutResponse": {
      "type": "object",
      "title": "commandputresponse",
      "properties": {
        "code": {
          "type": "string",
          "title": "code",
          "x-order": 0
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 1
        }
      }
    },
    "CommandResponse": {
      "description": "Response from the command. Unknown schema",
      "type": "object",
      "title": "response"
    },
    "Device": {
      "description": "Device or sensor supplying data and taking actuation commands",
      "type": "object",
      "title": "device",
      "properties": {
        "created": {
          "type": "integer",
          "title": "created",
          "x-order": 4
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 2
        },
        "labels": {
          "type": "array",
          "title": "labels",
          "items": {
            "type": "string",
            "title": "labels"
          },
          "x-omitempty": true,
          "x-order": 1
        },
        "lastConnected": {
          "type": "integer",
          "title": "lastConnected",
          "x-order": 7
        },
        "lastReported": {
          "type": "integer",
          "title": "lastReported",
          "x-order": 8
        },
        "location": {
          "type": "string",
          "title": "location",
          "x-order": 3
        },
        "modified": {
          "type": "integer",
          "title": "modified",
          "x-order": 5
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "operatingState": {
          "type": "string",
          "title": "operatingState",
          "x-order": 6
        },
        "profile": {
          "x-order": 9,
          "$ref": "#/definitions/DeviceProfile"
        }
      }
    },
    "DeviceProfile": {
      "description": "Template describing devices and sensors of the same nature in reporting the same data and offering the same commands",
      "type": "object",
      "title": "deviceprofile",
      "properties": {
        "commands": {
          "type": "array",
          "title": "commands",
          "items": {
            "$ref": "#/definitions/Command"
          },
          "x-omitempty": true,
          "x-order": 7
        },
        "created": {
          "type": "integer",
          "title": "created",
          "x-order": 2
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 1
        },
        "labels": {
          "type": "array",
          "title": "labels",
          "items": {
            "type": "string",
            "title": "labels"
          },
          "x-omitempty": true,
          "x-order": 0
        },
        "manufacturer": {
          "type": "string",
          "title": "manufacturer",
          "x-order": 4
        },
        "model": {
          "type": "string",
          "title": "model",
          "x-order": 5
        },
        "modified": {
          "type": "integer",
          "title": "modified",
          "x-order": 3
        },
        "resources": {
          "type": "array",
          "title": "resources",
          "items": {
            "$ref": "#/definitions/Resource"
          },
          "x-omitempty": true,
          "x-order": 6
        }
      }
    },
    "Policy": {
      "description": "Policy for access control",
      "type": "object",
      "title": "policy",
      "required": [
        "role",
        "resource",
        "method"
      ],
      "properties": {
        "method": {
          "description": "Method associated whith the policy",
          "type": "string",
          "title": "method",
          "x-order": 2,
          "example": "GET"
        },
        "resource": {
          "description": "Resource associated whith the policy",
          "type": "string",
          "title": "resource",
          "x-order": 1,
          "example": "/v1/devices/pi-136/*"
        },
        "role": {
          "description": "Role associated with the policy",
          "type": "string",
          "title": "role",
          "x-order": 0,
          "example": "guest"
        }
      }
    },
    "Reading": {
      "description": "Core device/sensor reading",
      "type": "object",
      "title": "reading",
      "properties": {
        "created": {
          "type": "integer",
          "title": "created",
          "x-order": 1
        },
        "modified": {
          "type": "integer",
          "title": "modified",
          "x-order": 2
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "pushed": {
          "type": "integer",
          "title": "pushed",
          "x-order": 5
        },
        "value": {
          "type": "string",
          "title": "value",
          "x-order": 3
        },
        "valueType": {
          "type": "string",
          "title": "valueType",
          "x-order": 4
        }
      }
    },
    "Resource": {
      "description": "Resource of a device/sensor",
      "type": "object",
      "title": "resource",
      "properties": {
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 1
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "properties": {
          "x-order": 3,
          "$ref": "#/definitions/ResourceProperties"
        },
        "tag": {
          "type": "string",
          "title": "tag",
          "x-order": 2
        }
      }
    },
    "ResourceProperties": {
      "type": "object",
      "title": "properties",
      "properties": {
        "unit": {
          "x-order": 1,
          "$ref": "#/definitions/ResourcePropertiesUnit"
        },
        "value": {
          "x-order": 0,
          "$ref": "#/definitions/ResourcePropertiesValue"
        }
      }
    },
    "ResourcePropertiesUnit": {
      "type": "object",
      "title": "unit",
      "properties": {
        "defaultValue": {
          "type": "string",
          "title": "defaultValue",
          "x-order": 2
        },
        "readWrite": {
          "type": "string",
          "title": "readWrite",
          "x-order": 1
        },
        "type": {
          "type": "string",
          "title": "type",
          "x-order": 0
        }
      }
    },
    "ResourcePropertiesValue": {
      "type": "object",
      "title": "value",
      "properties": {
        "assertion": {
          "type": "string",
          "title": "assertion",
          "x-order": 10
        },
        "base": {
          "type": "integer",
          "title": "base",
          "x-order": 9
        },
        "defaultValue": {
          "type": "string",
          "title": "defaultValue",
          "x-order": 4
        },
        "floatEncoding": {
          "type": "string",
          "title": "floatEncoding",
          "x-order": 11
        },
        "mask": {
          "type": "integer",
          "format": "uint64",
          "title": "mask",
          "x-order": 5
        },
        "maximum": {
          "type": "string",
          "title": "maximum",
          "x-order": 3
        },
        "mediatype": {
          "type": "string",
          "title": "mediatype",
          "x-order": 12
        },
        "minimum": {
          "type": "string",
          "title": "minimum",
          "x-order": 2
        },
        "offset": {
          "type": "integer",
          "title": "offset",
          "x-order": 8
        },
        "readWrite": {
          "type": "string",
          "title": "readWrite",
          "x-order": 1
        },
        "scale": {
          "type": "integer",
          "title": "scale",
          "x-order": 7
        },
        "shift": {
          "type": "integer",
          "format": "uint64",
          "title": "shift",
          "x-order": 6
        },
        "type": {
          "type": "string",
          "title": "type",
          "x-order": 0
        }
      }
    },
    "Role": {
      "description": "role of the Gateway",
      "type": "string",
      "title": "role"
    },
    "User": {
      "description": "Describes a user of the gateway",
      "type": "object",
      "title": "user",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "role": {
          "type": "string",
          "title": "name",
          "x-order": 1
        }
      }
    },
    "UserCreate": {
      "description": "Payload to create a new user",
      "type": "object",
      "title": "user",
      "required": [
        "name",
        "password",
        "role"
      ],
      "properties": {
        "name": {
          "type": "string",
          "title": "name"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "role": {
          "type": "string",
          "title": "name"
        }
      }
    },
    "UserUpdate": {
      "description": "Payload to updates a user",
      "type": "object",
      "title": "user",
      "properties": {
        "password": {
          "type": "string",
          "title": "password",
          "x-nullable": true
        },
        "role": {
          "type": "string",
          "title": "name",
          "x-nullable": true
        }
      }
    },
    "ValueDescriptor": {
      "description": "Core and MetaData value descriptor that describes device/sensor data sent and received",
      "type": "object",
      "title": "valueDescriptor",
      "properties": {
        "created": {
          "type": "integer",
          "title": "created",
          "x-order": 3
        },
        "defaultValue": {
          "type": "string",
          "title": "defaultValue",
          "x-order": 9
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 2
        },
        "formatting": {
          "type": "string",
          "title": "formatting",
          "x-order": 10
        },
        "labels": {
          "type": "array",
          "title": "labels",
          "items": {
            "type": "string",
            "title": "labels"
          },
          "x-omitempty": true,
          "x-order": 1
        },
        "max": {
          "type": "string",
          "title": "max",
          "x-order": 8
        },
        "min": {
          "type": "string",
          "title": "min",
          "x-order": 7
        },
        "modified": {
          "type": "integer",
          "title": "modified",
          "x-order": 4
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "type": {
          "type": "string",
          "title": "type",
          "x-order": 5
        },
        "uomLabel": {
          "description": "Unit",
          "type": "string",
          "title": "uomLabel",
          "x-order": 6
        }
      }
    }
  },
  "parameters": {
    "CommandBody": {
      "description": "properties for the command",
      "name": "body",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/CommandPayload"
      }
    },
    "CommandPath": {
      "type": "string",
      "description": "Name of the command",
      "name": "command",
      "in": "path",
      "required": true
    },
    "DevicePath": {
      "type": "string",
      "description": "The name of the device",
      "name": "device",
      "in": "path",
      "required": true
    },
    "Limit": {
      "maximum": 500,
      "minimum": 1,
      "type": "integer",
      "default": 50,
      "description": "The numbers of items to return",
      "name": "limit",
      "in": "query"
    },
    "Offset": {
      "type": "integer",
      "default": 0,
      "description": "The number of items to skip before starting to collect the result set",
      "name": "offset",
      "in": "query"
    },
    "PolicyBody": {
      "description": "Policy to process",
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Policy"
      }
    },
    "ResourcePath": {
      "type": "string",
      "description": "Name of the resource",
      "name": "resource",
      "in": "path",
      "required": true
    },
    "RoleBody": {
      "description": "Policy to process",
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Role"
      }
    },
    "RolePath": {
      "type": "string",
      "description": "Name of the Role",
      "name": "role",
      "in": "path",
      "required": true
    },
    "UserPath": {
      "type": "string",
      "description": "name of the user",
      "name": "user",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "BadRequest": {
      "description": "bad request",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Conflict": {
      "description": "conflict",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "CreationFailed": {
      "description": "Creation request is invalid",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Deleted": {
      "description": "Deleted",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Forbidden": {
      "description": "forbidden",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "InternalError": {
      "description": "For unknown or unanticipated issues",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "UpdateFailed": {
      "description": "Update request is invalid",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Updated": {
      "description": "Updated",
      "schema": {
        "type": "string",
        "title": "message"
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    },
    {}
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is an RESTful application service for the EdgeX Foundry IoT-Gateway",
    "title": "iot-gateway",
    "version": "0.0.2"
  },
  "host": "0.0.0.0:8080",
  "basePath": "/api",
  "paths": {
    "/v1/admin/policies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find all policies",
        "parameters": [
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 50,
            "description": "The numbers of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Policy"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a new policy",
        "parameters": [
          {
            "description": "Policy to process",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Policy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Policy"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "409": {
            "description": "conflict",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "summary": "Deletes the policy",
        "parameters": [
          {
            "description": "Policy to process",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Policy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/admin/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find all roles",
        "parameters": [
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 50,
            "description": "The numbers of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a new role",
        "parameters": [
          {
            "description": "Policy to process",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "409": {
            "description": "conflict",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/admin/roles/{role}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "summary": "Deletes the role",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the Role",
            "name": "role",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "409": {
            "description": "conflict",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/admin/roles/{role}/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Finds all Users associated with the role",
        "parameters": [
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 50,
            "description": "The numbers of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the Role",
            "name": "role",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/admin/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find all Users",
        "parameters": [
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 50,
            "description": "The numbers of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a new user",
        "parameters": [
          {
            "description": "User to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "409": {
            "description": "conflict",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/admin/users/{user}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find user by name",
        "parameters": [
          {
            "type": "string",
            "description": "name of the user",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes the user",
        "parameters": [
          {
            "type": "string",
            "description": "name of the user",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "summary": "Updates the user",
        "parameters": [
          {
            "type": "string",
            "description": "name of the user",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "400": {
            "description": "Update request is invalid",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/devices": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find all devices",
        "parameters": [
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "default": 50,
            "description": "The numbers of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "The number of items to skip before starting to collect the result set",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Device"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/devices/{device}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Find device by name",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the device",
            "name": "device",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/devices/{device}/commands/{command}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Issue the GET command referenced by the command name to the device/sensor.",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the device",
            "name": "device",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the command",
            "name": "command",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CommandResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Issue the PUT command referenced by the command name to the device/sensor.",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the device",
            "name": "device",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the command",
            "name": "command",
            "in": "path",
            "required": true
          },
          {
            "description": "properties for the command",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CommandPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CommandResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/devices/{device}/profile": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get deviceprofile of device",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the device",
            "name": "device",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/DeviceProfile"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/devices/{device}/resources/{resource}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get the last resource reading from the device",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the device",
            "name": "device",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Name of the resource",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/Reading"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/devices/{device}/valuedescriptors": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get all valuedescriptors",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the device",
            "name": "device",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueDescriptor"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "403": {
            "description": "forbidden",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "type": "string",
              "title": "message"
            }
          },
          "500": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    },
    "/v1/ping": {
      "get": {
        "security": [],
        "description": "Test service providing an indication that the service is available.",
        "produces": [
          "text/plain"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Return value of \"pong\"",
            "schema": {
              "type": "string",
              "example": "pong"
            }
          },
          "503": {
            "description": "For unknown or unanticipated issues",
            "schema": {
              "type": "string",
              "title": "message"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Command": {
      "description": "command of a device/sensor",
      "type": "object",
      "title": "command",
      "properties": {
        "get": {
          "type": "object",
          "title": "get",
          "properties": {
            "responses": {
              "type": "array",
              "title": "responses",
              "items": {
                "$ref": "#/definitions/CommandGetResponse"
              },
              "x-omitempty": true,
              "x-order": 0
            }
          },
          "x-order": 1
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "put": {
          "description": "availabill put command",
          "type": "object",
          "title": "put",
          "properties": {
            "parameterNames": {
              "type": "array",
              "title": "parameterNames",
              "items": {
                "type": "string"
              },
              "x-omitempty": true,
              "x-order": 0
            },
            "responses": {
              "type": "array",
              "title": "responses",
              "items": {
                "$ref": "#/definitions/CommandPutResponse"
              },
              "x-omitempty": true,
              "x-order": 1
            }
          },
          "x-order": 2
        }
      }
    },
    "CommandGet": {
      "type": "object",
      "title": "get",
      "properties": {
        "responses": {
          "type": "array",
          "title": "responses",
          "items": {
            "$ref": "#/definitions/CommandGetResponse"
          },
          "x-omitempty": true,
          "x-order": 0
        }
      },
      "x-order": 1
    },
    "CommandGetResponse": {
      "type": "object",
      "title": "commandgetresponse",
      "properties": {
        "code": {
          "type": "string",
          "title": "code",
          "x-order": 0
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 1
        },
        "expectedValues": {
          "type": "array",
          "title": "expectedValues",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "x-order": 2
        }
      }
    },
    "CommandPayload": {
      "description": "key/value properties for the command",
      "type": "object",
      "title": "commandPayload",
      "additionalProperties": {
        "type": "object"
      }
    },
    "CommandPut": {
      "description": "availabill put command",
      "type": "object",
      "title": "put",
      "properties": {
        "parameterNames": {
          "type": "array",
          "title": "parameterNames",
          "items": {
            "type": "string"
          },
          "x-omitempty": true,
          "x-order": 0
        },
        "responses": {
          "type": "array",
          "title": "responses",
          "items": {
            "$ref": "#/definitions/CommandPutResponse"
          },
          "x-omitempty": true,
          "x-order": 1
        }
      },
      "x-order": 2
    },
    "CommandPutResponse": {
      "type": "object",
      "title": "commandputresponse",
      "properties": {
        "code": {
          "type": "string",
          "title": "code",
          "x-order": 0
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 1
        }
      }
    },
    "CommandResponse": {
      "description": "Response from the command. Unknown schema",
      "type": "object",
      "title": "response"
    },
    "Device": {
      "description": "Device or sensor supplying data and taking actuation commands",
      "type": "object",
      "title": "device",
      "properties": {
        "created": {
          "type": "integer",
          "title": "created",
          "x-order": 4
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 2
        },
        "labels": {
          "type": "array",
          "title": "labels",
          "items": {
            "type": "string",
            "title": "labels"
          },
          "x-omitempty": true,
          "x-order": 1
        },
        "lastConnected": {
          "type": "integer",
          "title": "lastConnected",
          "x-order": 7
        },
        "lastReported": {
          "type": "integer",
          "title": "lastReported",
          "x-order": 8
        },
        "location": {
          "type": "string",
          "title": "location",
          "x-order": 3
        },
        "modified": {
          "type": "integer",
          "title": "modified",
          "x-order": 5
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "operatingState": {
          "type": "string",
          "title": "operatingState",
          "x-order": 6
        },
        "profile": {
          "x-order": 9,
          "$ref": "#/definitions/DeviceProfile"
        }
      }
    },
    "DeviceProfile": {
      "description": "Template describing devices and sensors of the same nature in reporting the same data and offering the same commands",
      "type": "object",
      "title": "deviceprofile",
      "properties": {
        "commands": {
          "type": "array",
          "title": "commands",
          "items": {
            "$ref": "#/definitions/Command"
          },
          "x-omitempty": true,
          "x-order": 7
        },
        "created": {
          "type": "integer",
          "title": "created",
          "x-order": 2
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 1
        },
        "labels": {
          "type": "array",
          "title": "labels",
          "items": {
            "type": "string",
            "title": "labels"
          },
          "x-omitempty": true,
          "x-order": 0
        },
        "manufacturer": {
          "type": "string",
          "title": "manufacturer",
          "x-order": 4
        },
        "model": {
          "type": "string",
          "title": "model",
          "x-order": 5
        },
        "modified": {
          "type": "integer",
          "title": "modified",
          "x-order": 3
        },
        "resources": {
          "type": "array",
          "title": "resources",
          "items": {
            "$ref": "#/definitions/Resource"
          },
          "x-omitempty": true,
          "x-order": 6
        }
      }
    },
    "Policy": {
      "description": "Policy for access control",
      "type": "object",
      "title": "policy",
      "required": [
        "role",
        "resource",
        "method"
      ],
      "properties": {
        "method": {
          "description": "Method associated whith the policy",
          "type": "string",
          "title": "method",
          "x-order": 2,
          "example": "GET"
        },
        "resource": {
          "description": "Resource associated whith the policy",
          "type": "string",
          "title": "resource",
          "x-order": 1,
          "example": "/v1/devices/pi-136/*"
        },
        "role": {
          "description": "Role associated with the policy",
          "type": "string",
          "title": "role",
          "x-order": 0,
          "example": "guest"
        }
      }
    },
    "Reading": {
      "description": "Core device/sensor reading",
      "type": "object",
      "title": "reading",
      "properties": {
        "created": {
          "type": "integer",
          "title": "created",
          "x-order": 1
        },
        "modified": {
          "type": "integer",
          "title": "modified",
          "x-order": 2
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "pushed": {
          "type": "integer",
          "title": "pushed",
          "x-order": 5
        },
        "value": {
          "type": "string",
          "title": "value",
          "x-order": 3
        },
        "valueType": {
          "type": "string",
          "title": "valueType",
          "x-order": 4
        }
      }
    },
    "Resource": {
      "description": "Resource of a device/sensor",
      "type": "object",
      "title": "resource",
      "properties": {
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 1
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "properties": {
          "x-order": 3,
          "$ref": "#/definitions/ResourceProperties"
        },
        "tag": {
          "type": "string",
          "title": "tag",
          "x-order": 2
        }
      }
    },
    "ResourceProperties": {
      "type": "object",
      "title": "properties",
      "properties": {
        "unit": {
          "x-order": 1,
          "$ref": "#/definitions/ResourcePropertiesUnit"
        },
        "value": {
          "x-order": 0,
          "$ref": "#/definitions/ResourcePropertiesValue"
        }
      }
    },
    "ResourcePropertiesUnit": {
      "type": "object",
      "title": "unit",
      "properties": {
        "defaultValue": {
          "type": "string",
          "title": "defaultValue",
          "x-order": 2
        },
        "readWrite": {
          "type": "string",
          "title": "readWrite",
          "x-order": 1
        },
        "type": {
          "type": "string",
          "title": "type",
          "x-order": 0
        }
      }
    },
    "ResourcePropertiesValue": {
      "type": "object",
      "title": "value",
      "properties": {
        "assertion": {
          "type": "string",
          "title": "assertion",
          "x-order": 10
        },
        "base": {
          "type": "integer",
          "title": "base",
          "x-order": 9
        },
        "defaultValue": {
          "type": "string",
          "title": "defaultValue",
          "x-order": 4
        },
        "floatEncoding": {
          "type": "string",
          "title": "floatEncoding",
          "x-order": 11
        },
        "mask": {
          "type": "integer",
          "format": "uint64",
          "title": "mask",
          "x-order": 5
        },
        "maximum": {
          "type": "string",
          "title": "maximum",
          "x-order": 3
        },
        "mediatype": {
          "type": "string",
          "title": "mediatype",
          "x-order": 12
        },
        "minimum": {
          "type": "string",
          "title": "minimum",
          "x-order": 2
        },
        "offset": {
          "type": "integer",
          "title": "offset",
          "x-order": 8
        },
        "readWrite": {
          "type": "string",
          "title": "readWrite",
          "x-order": 1
        },
        "scale": {
          "type": "integer",
          "title": "scale",
          "x-order": 7
        },
        "shift": {
          "type": "integer",
          "format": "uint64",
          "title": "shift",
          "x-order": 6
        },
        "type": {
          "type": "string",
          "title": "type",
          "x-order": 0
        }
      }
    },
    "Role": {
      "description": "role of the Gateway",
      "type": "string",
      "title": "role"
    },
    "User": {
      "description": "Describes a user of the gateway",
      "type": "object",
      "title": "user",
      "properties": {
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "role": {
          "type": "string",
          "title": "name",
          "x-order": 1
        }
      }
    },
    "UserCreate": {
      "description": "Payload to create a new user",
      "type": "object",
      "title": "user",
      "required": [
        "name",
        "password",
        "role"
      ],
      "properties": {
        "name": {
          "type": "string",
          "title": "name"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "role": {
          "type": "string",
          "title": "name"
        }
      }
    },
    "UserUpdate": {
      "description": "Payload to updates a user",
      "type": "object",
      "title": "user",
      "properties": {
        "password": {
          "type": "string",
          "title": "password",
          "x-nullable": true
        },
        "role": {
          "type": "string",
          "title": "name",
          "x-nullable": true
        }
      }
    },
    "ValueDescriptor": {
      "description": "Core and MetaData value descriptor that describes device/sensor data sent and received",
      "type": "object",
      "title": "valueDescriptor",
      "properties": {
        "created": {
          "type": "integer",
          "title": "created",
          "x-order": 3
        },
        "defaultValue": {
          "type": "string",
          "title": "defaultValue",
          "x-order": 9
        },
        "description": {
          "type": "string",
          "title": "description",
          "x-order": 2
        },
        "formatting": {
          "type": "string",
          "title": "formatting",
          "x-order": 10
        },
        "labels": {
          "type": "array",
          "title": "labels",
          "items": {
            "type": "string",
            "title": "labels"
          },
          "x-omitempty": true,
          "x-order": 1
        },
        "max": {
          "type": "string",
          "title": "max",
          "x-order": 8
        },
        "min": {
          "type": "string",
          "title": "min",
          "x-order": 7
        },
        "modified": {
          "type": "integer",
          "title": "modified",
          "x-order": 4
        },
        "name": {
          "type": "string",
          "title": "name",
          "x-order": 0
        },
        "type": {
          "type": "string",
          "title": "type",
          "x-order": 5
        },
        "uomLabel": {
          "description": "Unit",
          "type": "string",
          "title": "uomLabel",
          "x-order": 6
        }
      }
    }
  },
  "parameters": {
    "CommandBody": {
      "description": "properties for the command",
      "name": "body",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/CommandPayload"
      }
    },
    "CommandPath": {
      "type": "string",
      "description": "Name of the command",
      "name": "command",
      "in": "path",
      "required": true
    },
    "DevicePath": {
      "type": "string",
      "description": "The name of the device",
      "name": "device",
      "in": "path",
      "required": true
    },
    "Limit": {
      "maximum": 500,
      "minimum": 1,
      "type": "integer",
      "default": 50,
      "description": "The numbers of items to return",
      "name": "limit",
      "in": "query"
    },
    "Offset": {
      "minimum": 0,
      "type": "integer",
      "default": 0,
      "description": "The number of items to skip before starting to collect the result set",
      "name": "offset",
      "in": "query"
    },
    "PolicyBody": {
      "description": "Policy to process",
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Policy"
      }
    },
    "ResourcePath": {
      "type": "string",
      "description": "Name of the resource",
      "name": "resource",
      "in": "path",
      "required": true
    },
    "RoleBody": {
      "description": "Policy to process",
      "name": "body",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Role"
      }
    },
    "RolePath": {
      "type": "string",
      "description": "Name of the Role",
      "name": "role",
      "in": "path",
      "required": true
    },
    "UserPath": {
      "type": "string",
      "description": "name of the user",
      "name": "user",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "BadRequest": {
      "description": "bad request",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Conflict": {
      "description": "conflict",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "CreationFailed": {
      "description": "Creation request is invalid",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Deleted": {
      "description": "Deleted",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Forbidden": {
      "description": "forbidden",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "InternalError": {
      "description": "For unknown or unanticipated issues",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "UpdateFailed": {
      "description": "Update request is invalid",
      "schema": {
        "type": "string",
        "title": "message"
      }
    },
    "Updated": {
      "description": "Updated",
      "schema": {
        "type": "string",
        "title": "message"
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    },
    {}
  ]
}`))
}
