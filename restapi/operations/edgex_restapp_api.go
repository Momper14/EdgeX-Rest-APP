// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/momper14/edgex-restapp/models"
)

// NewEdgexRestappAPI creates a new EdgexRestapp instance
func NewEdgexRestappAPI(spec *loads.Document) *EdgexRestappAPI {
	return &EdgexRestappAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),
		TxtProducer:  runtime.TextProducer(),

		DeleteV1AdminPoliciesHandler: DeleteV1AdminPoliciesHandlerFunc(func(params DeleteV1AdminPoliciesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation DeleteV1AdminPolicies has not yet been implemented")
		}),
		DeleteV1AdminRolesRoleHandler: DeleteV1AdminRolesRoleHandlerFunc(func(params DeleteV1AdminRolesRoleParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation DeleteV1AdminRolesRole has not yet been implemented")
		}),
		DeleteV1AdminUsersUserHandler: DeleteV1AdminUsersUserHandlerFunc(func(params DeleteV1AdminUsersUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation DeleteV1AdminUsersUser has not yet been implemented")
		}),
		GetV1AdminPoliciesHandler: GetV1AdminPoliciesHandlerFunc(func(params GetV1AdminPoliciesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1AdminPolicies has not yet been implemented")
		}),
		GetV1AdminRolesHandler: GetV1AdminRolesHandlerFunc(func(params GetV1AdminRolesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1AdminRoles has not yet been implemented")
		}),
		GetV1AdminRolesRoleUsersHandler: GetV1AdminRolesRoleUsersHandlerFunc(func(params GetV1AdminRolesRoleUsersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1AdminRolesRoleUsers has not yet been implemented")
		}),
		GetV1AdminUsersHandler: GetV1AdminUsersHandlerFunc(func(params GetV1AdminUsersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1AdminUsers has not yet been implemented")
		}),
		GetV1AdminUsersUserHandler: GetV1AdminUsersUserHandlerFunc(func(params GetV1AdminUsersUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1AdminUsersUser has not yet been implemented")
		}),
		GetV1DevicesHandler: GetV1DevicesHandlerFunc(func(params GetV1DevicesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1Devices has not yet been implemented")
		}),
		GetV1DevicesDeviceHandler: GetV1DevicesDeviceHandlerFunc(func(params GetV1DevicesDeviceParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1DevicesDevice has not yet been implemented")
		}),
		GetV1DevicesDeviceCommandsCommandHandler: GetV1DevicesDeviceCommandsCommandHandlerFunc(func(params GetV1DevicesDeviceCommandsCommandParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1DevicesDeviceCommandsCommand has not yet been implemented")
		}),
		GetV1DevicesDeviceProfileHandler: GetV1DevicesDeviceProfileHandlerFunc(func(params GetV1DevicesDeviceProfileParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1DevicesDeviceProfile has not yet been implemented")
		}),
		GetV1DevicesDeviceResourcesResourceHandler: GetV1DevicesDeviceResourcesResourceHandlerFunc(func(params GetV1DevicesDeviceResourcesResourceParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1DevicesDeviceResourcesResource has not yet been implemented")
		}),
		GetV1DevicesDeviceValuedescriptorsHandler: GetV1DevicesDeviceValuedescriptorsHandlerFunc(func(params GetV1DevicesDeviceValuedescriptorsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation GetV1DevicesDeviceValuedescriptors has not yet been implemented")
		}),
		GetV1PingHandler: GetV1PingHandlerFunc(func(params GetV1PingParams) middleware.Responder {
			return middleware.NotImplemented("operation GetV1Ping has not yet been implemented")
		}),
		PatchV1AdminUsersUserHandler: PatchV1AdminUsersUserHandlerFunc(func(params PatchV1AdminUsersUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PatchV1AdminUsersUser has not yet been implemented")
		}),
		PostV1AdminPoliciesHandler: PostV1AdminPoliciesHandlerFunc(func(params PostV1AdminPoliciesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PostV1AdminPolicies has not yet been implemented")
		}),
		PostV1AdminRolesHandler: PostV1AdminRolesHandlerFunc(func(params PostV1AdminRolesParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PostV1AdminRoles has not yet been implemented")
		}),
		PostV1AdminUsersHandler: PostV1AdminUsersHandlerFunc(func(params PostV1AdminUsersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PostV1AdminUsers has not yet been implemented")
		}),
		PutV1DevicesDeviceCommandsCommandHandler: PutV1DevicesDeviceCommandsCommandHandlerFunc(func(params PutV1DevicesDeviceCommandsCommandParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation PutV1DevicesDeviceCommandsCommand has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuthAuth: func(user string, pass string) (*models.User, error) {
			return nil, errors.NotImplemented("basic auth  (basicAuth) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*EdgexRestappAPI This is an RESTful application service for the EdgeX Foundry IoT-Gateway */
type EdgexRestappAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for the following mime types:
	//   - text/plain
	TxtProducer runtime.Producer

	// BasicAuthAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuthAuth func(string, string) (*models.User, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// DeleteV1AdminPoliciesHandler sets the operation handler for the delete v1 admin policies operation
	DeleteV1AdminPoliciesHandler DeleteV1AdminPoliciesHandler
	// DeleteV1AdminRolesRoleHandler sets the operation handler for the delete v1 admin roles role operation
	DeleteV1AdminRolesRoleHandler DeleteV1AdminRolesRoleHandler
	// DeleteV1AdminUsersUserHandler sets the operation handler for the delete v1 admin users user operation
	DeleteV1AdminUsersUserHandler DeleteV1AdminUsersUserHandler
	// GetV1AdminPoliciesHandler sets the operation handler for the get v1 admin policies operation
	GetV1AdminPoliciesHandler GetV1AdminPoliciesHandler
	// GetV1AdminRolesHandler sets the operation handler for the get v1 admin roles operation
	GetV1AdminRolesHandler GetV1AdminRolesHandler
	// GetV1AdminRolesRoleUsersHandler sets the operation handler for the get v1 admin roles role users operation
	GetV1AdminRolesRoleUsersHandler GetV1AdminRolesRoleUsersHandler
	// GetV1AdminUsersHandler sets the operation handler for the get v1 admin users operation
	GetV1AdminUsersHandler GetV1AdminUsersHandler
	// GetV1AdminUsersUserHandler sets the operation handler for the get v1 admin users user operation
	GetV1AdminUsersUserHandler GetV1AdminUsersUserHandler
	// GetV1DevicesHandler sets the operation handler for the get v1 devices operation
	GetV1DevicesHandler GetV1DevicesHandler
	// GetV1DevicesDeviceHandler sets the operation handler for the get v1 devices device operation
	GetV1DevicesDeviceHandler GetV1DevicesDeviceHandler
	// GetV1DevicesDeviceCommandsCommandHandler sets the operation handler for the get v1 devices device commands command operation
	GetV1DevicesDeviceCommandsCommandHandler GetV1DevicesDeviceCommandsCommandHandler
	// GetV1DevicesDeviceProfileHandler sets the operation handler for the get v1 devices device profile operation
	GetV1DevicesDeviceProfileHandler GetV1DevicesDeviceProfileHandler
	// GetV1DevicesDeviceResourcesResourceHandler sets the operation handler for the get v1 devices device resources resource operation
	GetV1DevicesDeviceResourcesResourceHandler GetV1DevicesDeviceResourcesResourceHandler
	// GetV1DevicesDeviceValuedescriptorsHandler sets the operation handler for the get v1 devices device valuedescriptors operation
	GetV1DevicesDeviceValuedescriptorsHandler GetV1DevicesDeviceValuedescriptorsHandler
	// GetV1PingHandler sets the operation handler for the get v1 ping operation
	GetV1PingHandler GetV1PingHandler
	// PatchV1AdminUsersUserHandler sets the operation handler for the patch v1 admin users user operation
	PatchV1AdminUsersUserHandler PatchV1AdminUsersUserHandler
	// PostV1AdminPoliciesHandler sets the operation handler for the post v1 admin policies operation
	PostV1AdminPoliciesHandler PostV1AdminPoliciesHandler
	// PostV1AdminRolesHandler sets the operation handler for the post v1 admin roles operation
	PostV1AdminRolesHandler PostV1AdminRolesHandler
	// PostV1AdminUsersHandler sets the operation handler for the post v1 admin users operation
	PostV1AdminUsersHandler PostV1AdminUsersHandler
	// PutV1DevicesDeviceCommandsCommandHandler sets the operation handler for the put v1 devices device commands command operation
	PutV1DevicesDeviceCommandsCommandHandler PutV1DevicesDeviceCommandsCommandHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *EdgexRestappAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *EdgexRestappAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *EdgexRestappAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *EdgexRestappAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *EdgexRestappAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *EdgexRestappAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *EdgexRestappAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *EdgexRestappAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *EdgexRestappAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the EdgexRestappAPI
func (o *EdgexRestappAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.BasicAuthAuth == nil {
		unregistered = append(unregistered, "BasicAuthAuth")
	}

	if o.DeleteV1AdminPoliciesHandler == nil {
		unregistered = append(unregistered, "DeleteV1AdminPoliciesHandler")
	}
	if o.DeleteV1AdminRolesRoleHandler == nil {
		unregistered = append(unregistered, "DeleteV1AdminRolesRoleHandler")
	}
	if o.DeleteV1AdminUsersUserHandler == nil {
		unregistered = append(unregistered, "DeleteV1AdminUsersUserHandler")
	}
	if o.GetV1AdminPoliciesHandler == nil {
		unregistered = append(unregistered, "GetV1AdminPoliciesHandler")
	}
	if o.GetV1AdminRolesHandler == nil {
		unregistered = append(unregistered, "GetV1AdminRolesHandler")
	}
	if o.GetV1AdminRolesRoleUsersHandler == nil {
		unregistered = append(unregistered, "GetV1AdminRolesRoleUsersHandler")
	}
	if o.GetV1AdminUsersHandler == nil {
		unregistered = append(unregistered, "GetV1AdminUsersHandler")
	}
	if o.GetV1AdminUsersUserHandler == nil {
		unregistered = append(unregistered, "GetV1AdminUsersUserHandler")
	}
	if o.GetV1DevicesHandler == nil {
		unregistered = append(unregistered, "GetV1DevicesHandler")
	}
	if o.GetV1DevicesDeviceHandler == nil {
		unregistered = append(unregistered, "GetV1DevicesDeviceHandler")
	}
	if o.GetV1DevicesDeviceCommandsCommandHandler == nil {
		unregistered = append(unregistered, "GetV1DevicesDeviceCommandsCommandHandler")
	}
	if o.GetV1DevicesDeviceProfileHandler == nil {
		unregistered = append(unregistered, "GetV1DevicesDeviceProfileHandler")
	}
	if o.GetV1DevicesDeviceResourcesResourceHandler == nil {
		unregistered = append(unregistered, "GetV1DevicesDeviceResourcesResourceHandler")
	}
	if o.GetV1DevicesDeviceValuedescriptorsHandler == nil {
		unregistered = append(unregistered, "GetV1DevicesDeviceValuedescriptorsHandler")
	}
	if o.GetV1PingHandler == nil {
		unregistered = append(unregistered, "GetV1PingHandler")
	}
	if o.PatchV1AdminUsersUserHandler == nil {
		unregistered = append(unregistered, "PatchV1AdminUsersUserHandler")
	}
	if o.PostV1AdminPoliciesHandler == nil {
		unregistered = append(unregistered, "PostV1AdminPoliciesHandler")
	}
	if o.PostV1AdminRolesHandler == nil {
		unregistered = append(unregistered, "PostV1AdminRolesHandler")
	}
	if o.PostV1AdminUsersHandler == nil {
		unregistered = append(unregistered, "PostV1AdminUsersHandler")
	}
	if o.PutV1DevicesDeviceCommandsCommandHandler == nil {
		unregistered = append(unregistered, "PutV1DevicesDeviceCommandsCommandHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *EdgexRestappAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *EdgexRestappAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "basicAuth":
			result[name] = o.BasicAuthenticator(func(username, password string) (interface{}, error) {
				return o.BasicAuthAuth(username, password)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *EdgexRestappAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *EdgexRestappAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *EdgexRestappAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "text/plain":
			result["text/plain"] = o.TxtProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *EdgexRestappAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the edgex restapp API
func (o *EdgexRestappAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *EdgexRestappAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/admin/policies"] = NewDeleteV1AdminPolicies(o.context, o.DeleteV1AdminPoliciesHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/admin/roles/{role}"] = NewDeleteV1AdminRolesRole(o.context, o.DeleteV1AdminRolesRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/admin/users/{user}"] = NewDeleteV1AdminUsersUser(o.context, o.DeleteV1AdminUsersUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/admin/policies"] = NewGetV1AdminPolicies(o.context, o.GetV1AdminPoliciesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/admin/roles"] = NewGetV1AdminRoles(o.context, o.GetV1AdminRolesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/admin/roles/{role}/users"] = NewGetV1AdminRolesRoleUsers(o.context, o.GetV1AdminRolesRoleUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/admin/users"] = NewGetV1AdminUsers(o.context, o.GetV1AdminUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/admin/users/{user}"] = NewGetV1AdminUsersUser(o.context, o.GetV1AdminUsersUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices"] = NewGetV1Devices(o.context, o.GetV1DevicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/{device}"] = NewGetV1DevicesDevice(o.context, o.GetV1DevicesDeviceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/{device}/commands/{command}"] = NewGetV1DevicesDeviceCommandsCommand(o.context, o.GetV1DevicesDeviceCommandsCommandHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/{device}/profile"] = NewGetV1DevicesDeviceProfile(o.context, o.GetV1DevicesDeviceProfileHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/{device}/resources/{resource}"] = NewGetV1DevicesDeviceResourcesResource(o.context, o.GetV1DevicesDeviceResourcesResourceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/{device}/valuedescriptors"] = NewGetV1DevicesDeviceValuedescriptors(o.context, o.GetV1DevicesDeviceValuedescriptorsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/ping"] = NewGetV1Ping(o.context, o.GetV1PingHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/admin/users/{user}"] = NewPatchV1AdminUsersUser(o.context, o.PatchV1AdminUsersUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/admin/policies"] = NewPostV1AdminPolicies(o.context, o.PostV1AdminPoliciesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/admin/roles"] = NewPostV1AdminRoles(o.context, o.PostV1AdminRolesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/admin/users"] = NewPostV1AdminUsers(o.context, o.PostV1AdminUsersHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/devices/{device}/commands/{command}"] = NewPutV1DevicesDeviceCommandsCommand(o.context, o.PutV1DevicesDeviceCommandsCommandHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *EdgexRestappAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *EdgexRestappAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *EdgexRestappAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *EdgexRestappAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *EdgexRestappAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
