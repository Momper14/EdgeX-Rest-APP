// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/momper14/edgex-restapp/models"
)

// PatchV1AdminUsersUserHandlerFunc turns a function with the right signature into a patch v1 admin users user handler
type PatchV1AdminUsersUserHandlerFunc func(PatchV1AdminUsersUserParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchV1AdminUsersUserHandlerFunc) Handle(params PatchV1AdminUsersUserParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PatchV1AdminUsersUserHandler interface for that can handle valid patch v1 admin users user params
type PatchV1AdminUsersUserHandler interface {
	Handle(PatchV1AdminUsersUserParams, *models.User) middleware.Responder
}

// NewPatchV1AdminUsersUser creates a new http.Handler for the patch v1 admin users user operation
func NewPatchV1AdminUsersUser(ctx *middleware.Context, handler PatchV1AdminUsersUserHandler) *PatchV1AdminUsersUser {
	return &PatchV1AdminUsersUser{Context: ctx, Handler: handler}
}

/*PatchV1AdminUsersUser swagger:route PATCH /v1/admin/users/{user} patchV1AdminUsersUser

Updates the user

*/
type PatchV1AdminUsersUser struct {
	Context *middleware.Context
	Handler PatchV1AdminUsersUserHandler
}

func (o *PatchV1AdminUsersUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchV1AdminUsersUserParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
