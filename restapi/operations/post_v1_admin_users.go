// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/momper14/edgex-restapp/models"
)

// PostV1AdminUsersHandlerFunc turns a function with the right signature into a post v1 admin users handler
type PostV1AdminUsersHandlerFunc func(PostV1AdminUsersParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1AdminUsersHandlerFunc) Handle(params PostV1AdminUsersParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PostV1AdminUsersHandler interface for that can handle valid post v1 admin users params
type PostV1AdminUsersHandler interface {
	Handle(PostV1AdminUsersParams, *models.User) middleware.Responder
}

// NewPostV1AdminUsers creates a new http.Handler for the post v1 admin users operation
func NewPostV1AdminUsers(ctx *middleware.Context, handler PostV1AdminUsersHandler) *PostV1AdminUsers {
	return &PostV1AdminUsers{Context: ctx, Handler: handler}
}

/*PostV1AdminUsers swagger:route POST /v1/admin/users postV1AdminUsers

Add a new user

*/
type PostV1AdminUsers struct {
	Context *middleware.Context
	Handler PostV1AdminUsersHandler
}

func (o *PostV1AdminUsers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1AdminUsersParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
