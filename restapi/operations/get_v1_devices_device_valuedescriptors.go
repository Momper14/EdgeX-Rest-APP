// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/momper14/edgex-restapp/models"
)

// GetV1DevicesDeviceValuedescriptorsHandlerFunc turns a function with the right signature into a get v1 devices device valuedescriptors handler
type GetV1DevicesDeviceValuedescriptorsHandlerFunc func(GetV1DevicesDeviceValuedescriptorsParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1DevicesDeviceValuedescriptorsHandlerFunc) Handle(params GetV1DevicesDeviceValuedescriptorsParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetV1DevicesDeviceValuedescriptorsHandler interface for that can handle valid get v1 devices device valuedescriptors params
type GetV1DevicesDeviceValuedescriptorsHandler interface {
	Handle(GetV1DevicesDeviceValuedescriptorsParams, *models.User) middleware.Responder
}

// NewGetV1DevicesDeviceValuedescriptors creates a new http.Handler for the get v1 devices device valuedescriptors operation
func NewGetV1DevicesDeviceValuedescriptors(ctx *middleware.Context, handler GetV1DevicesDeviceValuedescriptorsHandler) *GetV1DevicesDeviceValuedescriptors {
	return &GetV1DevicesDeviceValuedescriptors{Context: ctx, Handler: handler}
}

/*GetV1DevicesDeviceValuedescriptors swagger:route GET /v1/devices/{device}/valuedescriptors getV1DevicesDeviceValuedescriptors

Get all valuedescriptors

*/
type GetV1DevicesDeviceValuedescriptors struct {
	Context *middleware.Context
	Handler GetV1DevicesDeviceValuedescriptorsHandler
}

func (o *GetV1DevicesDeviceValuedescriptors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1DevicesDeviceValuedescriptorsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
