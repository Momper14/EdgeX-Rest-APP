// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Command command
//
// command of a device/sensor
//
// swagger:model Command
type Command struct {

	// name
	Name string `json:"name,omitempty"`

	// get
	Get *CommandGet `json:"get,omitempty"`

	// put
	Put *CommandPut `json:"put,omitempty"`
}

// Validate validates this command
func (m *Command) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePut(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Command) validateGet(formats strfmt.Registry) error {
	if swag.IsZero(m.Get) { // not required
		return nil
	}

	if m.Get != nil {
		if err := m.Get.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("get")
			}
			return err
		}
	}

	return nil
}

func (m *Command) validatePut(formats strfmt.Registry) error {
	if swag.IsZero(m.Put) { // not required
		return nil
	}

	if m.Put != nil {
		if err := m.Put.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("put")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this command based on the context it is used
func (m *Command) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePut(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Command) contextValidateGet(ctx context.Context, formats strfmt.Registry) error {

	if m.Get != nil {
		if err := m.Get.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("get")
			}
			return err
		}
	}

	return nil
}

func (m *Command) contextValidatePut(ctx context.Context, formats strfmt.Registry) error {

	if m.Put != nil {
		if err := m.Put.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("put")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Command) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Command) UnmarshalBinary(b []byte) error {
	var res Command
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommandGet get
//
// swagger:model CommandGet
type CommandGet struct {

	// responses
	Responses []*CommandGetResponse `json:"responses,omitempty"`
}

// Validate validates this command get
func (m *CommandGet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandGet) validateResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.Responses) { // not required
		return nil
	}

	for i := 0; i < len(m.Responses); i++ {
		if swag.IsZero(m.Responses[i]) { // not required
			continue
		}

		if m.Responses[i] != nil {
			if err := m.Responses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("get" + "." + "responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this command get based on the context it is used
func (m *CommandGet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandGet) contextValidateResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Responses); i++ {

		if m.Responses[i] != nil {
			if err := m.Responses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("get" + "." + "responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommandGet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommandGet) UnmarshalBinary(b []byte) error {
	var res CommandGet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CommandPut put
//
// availabill put command
//
// swagger:model CommandPut
type CommandPut struct {

	// parameterNames
	ParameterNames []string `json:"parameterNames,omitempty"`

	// responses
	Responses []*CommandPutResponse `json:"responses,omitempty"`
}

// Validate validates this command put
func (m *CommandPut) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandPut) validateResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.Responses) { // not required
		return nil
	}

	for i := 0; i < len(m.Responses); i++ {
		if swag.IsZero(m.Responses[i]) { // not required
			continue
		}

		if m.Responses[i] != nil {
			if err := m.Responses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("put" + "." + "responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this command put based on the context it is used
func (m *CommandPut) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandPut) contextValidateResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Responses); i++ {

		if m.Responses[i] != nil {
			if err := m.Responses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("put" + "." + "responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommandPut) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommandPut) UnmarshalBinary(b []byte) error {
	var res CommandPut
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
